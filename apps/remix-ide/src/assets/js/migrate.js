// eslint-disable-next-line no-unused-vars
async function migrateFilesFromLocalStorage (cb) {
  // eslint-disable-next-line no-undef
  BrowserFS.install(window)
  // eslint-disable-next-line no-undef
  BrowserFS.configure({
    fs: 'LocalStorage'
  }, async function (e) {
    if (e) console.log(e)

    const browserFS = require('fs')

    /**
      * copy the folder recursively (internal use)
      * @param {string} path is the folder to be copied over
      * @param {Function} visitFile is a function called for each visited files
      * @param {Function} visitFolder is a function called for each visited folders
      */
    async function _copyFolderToJsonInternal (path, visitFile, visitFolder, fs) {
      visitFile = visitFile || (() => { })
      visitFolder = visitFolder || (() => { })
      return new Promise((resolve, reject) => {
        const json = {}
        if (fs.existsSync(path)) {
          try {
            const items = fs.readdirSync(path)
            visitFolder({ path })
            if (items.length !== 0) {
              items.forEach(async (item, index) => {
                const file = {}
                const curPath = `${path}${path.endsWith('/') ? '' : '/'}${item}`
                if (fs.statSync(curPath).isDirectory()) {
                  file.children = await _copyFolderToJsonInternal(curPath, visitFile, visitFolder, fs)
                } else {
                  file.content = fs.readFileSync(curPath, 'utf8')
                  visitFile({ path: curPath, content: file.content })
                }
                json[curPath] = file
              })
            }
          } catch (e) {
            console.log(e)
            return reject(e)
          }
        }
        return resolve(json)
      })
    }

    /**
       * copy the folder recursively
       * @param {string} path is the folder to be copied over
       * @param {Function} visitFile is a function called for each visited files
       * @param {Function} visitFolder is a function called for each visited folders
       */
    async function copyFolderToJson (path, visitFile, visitFolder, fs) {
      visitFile = visitFile || (() => { })
      visitFolder = visitFolder || (() => { })
      return _copyFolderToJsonInternal(path, visitFile, visitFolder, fs)
    }

    const populateWorkspace = async (json, fs) => {
      for (const item in json) {
        const isFolder = json[item].content === undefined
        if (isFolder) {
          await createDir(item, fs)
          await populateWorkspace(json[item].children, fs)
        } else {
          try {
            await fs.writeFile(item, json[item].content, 'utf8')
          } catch (error) {
            console.log(error)
          }
        }
      }
    }

    const createDir = async (path, fs) => {
      const paths = path.split('/')
      if (paths.length && paths[0] === '') paths.shift()
      let currentCheck = ''
      for (const value of paths) {
        currentCheck = currentCheck + '/' + value
        if (!await fs.exists(currentCheck)) {
          try {
            await fs.mkdir(currentCheck)
          } catch (error) {
            console.log(error)
          }
        }
      }
    }

    const files = testData // await copyFolderToJson('/', null, null, browserFS)
    console.log(files)
    await populateWorkspace(files, browserFS)
    // eslint-disable-next-line no-undef
    if (cb) cb()
  })
}

/* eslint-disable no-template-curly-in-string */
const testData = {
  '/.workspaces': {
    children: {
      '/.workspaces/default_workspace': {
        children: {
          '/.workspaces/default_workspace/README.txt': {
            content: "REMIX EXAMPLE PROJECT\n\nRemix example project is present when Remix loads very first time or there are no files existing in the File Explorer. \nIt contains 3 directories:\n\n1. 'contracts': Holds three contracts with different complexity level, denoted with number prefix in file name.\n2. 'scripts': Holds two scripts to deploy a contract. It is explained below.\n3. 'tests': Contains one test file for 'Ballot' contract with unit tests in Solidity.\n\nSCRIPTS\n\nThe 'scripts' folder contains example async/await scripts for deploying the 'Storage' contract.\nFor the deployment of any other contract, 'contractName' and 'constructorArgs' should be updated (along with other code if required). \nScripts have full access to the web3.js and ethers.js libraries.\n\nTo run a script, right click on file name in the file explorer and click 'Run'. Remember, Solidity file must already be compiled.\n\nOutput from script will appear in remix terminal.\n"
          },
          '/.workspaces/default_workspace/contracts': {
            children: {
              '/.workspaces/default_workspace/contracts/1_Storage.sol': {
                content: "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract Storage {\n\n    uint256 number;\n\n    /**\n     * @dev Store value in variable\n     * @param num value to store\n     */\n    function store(uint256 num) public {\n        number = num;\n    }\n\n    /**\n     * @dev Return value \n     * @return value of 'number'\n     */\n    function retrieve() public view returns (uint256){\n        return number;\n    }\n}"
              },
              '/.workspaces/default_workspace/contracts/2_Owner.sol': {
                content: "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Owner\n * @dev Set & change owner\n */\ncontract Owner {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier isOwner() {\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use 'require' to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"
              },
              '/.workspaces/default_workspace/contracts/3_Ballot.sol': {
                content: "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/** \n * @title Ballot\n * @dev Implements voting process along with vote delegation\n */\ncontract Ballot {\n   \n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        address delegate; // person delegated to\n        uint vote;   // index of the voted proposal\n    }\n\n    struct Proposal {\n        // If you can limit the length to a certain number of bytes, \n        // always use one of bytes1 to bytes32 because they are much cheaper\n        bytes32 name;   // short name (up to 32 bytes)\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    mapping(address => Voter) public voters;\n\n    Proposal[] public proposals;\n\n    /** \n     * @dev Create a new ballot to choose one of 'proposalNames'.\n     * @param proposalNames names of proposals\n     */\n    constructor(bytes32[] memory proposalNames) {\n        chairperson = msg.sender;\n        voters[chairperson].weight = 1;\n\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // 'Proposal({...})' creates a temporary\n            // Proposal object and 'proposals.push(...)'\n            // appends it to the end of 'proposals'.\n            proposals.push(Proposal({\n                name: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n    \n    /** \n     * @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\n     * @param voter address of voter\n     */\n    function giveRightToVote(address voter) public {\n        require(\n            msg.sender == chairperson,\n            \"Only chairperson can give right to vote.\"\n        );\n        require(\n            !voters[voter].voted,\n            \"The voter already voted.\"\n        );\n        require(voters[voter].weight == 0);\n        voters[voter].weight = 1;\n    }\n\n    /**\n     * @dev Delegate your vote to the voter 'to'.\n     * @param to address to which vote is delegated\n     */\n    function delegate(address to) public {\n        Voter storage sender = voters[msg.sender];\n        require(!sender.voted, \"You already voted.\");\n        require(to != msg.sender, \"Self-delegation is disallowed.\");\n\n        while (voters[to].delegate != address(0)) {\n            to = voters[to].delegate;\n\n            // We found a loop in the delegation, not allowed.\n            require(to != msg.sender, \"Found loop in delegation.\");\n        }\n        sender.voted = true;\n        sender.delegate = to;\n        Voter storage delegate_ = voters[to];\n        if (delegate_.voted) {\n            // If the delegate already voted,\n            // directly add to the number of votes\n            proposals[delegate_.vote].voteCount += sender.weight;\n        } else {\n            // If the delegate did not vote yet,\n            // add to her weight.\n            delegate_.weight += sender.weight;\n        }\n    }\n\n    /**\n     * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\n     * @param proposal index of proposal in the proposals array\n     */\n    function vote(uint proposal) public {\n        Voter storage sender = voters[msg.sender];\n        require(sender.weight != 0, \"Has no right to vote\");\n        require(!sender.voted, \"Already voted.\");\n        sender.voted = true;\n        sender.vote = proposal;\n\n        // If 'proposal' is out of the range of the array,\n        // this will throw automatically and revert all\n        // changes.\n        proposals[proposal].voteCount += sender.weight;\n    }\n\n    /** \n     * @dev Computes the winning proposal taking all previous votes into account.\n     * @return winningProposal_ index of winning proposal in the proposals array\n     */\n    function winningProposal() public view\n            returns (uint winningProposal_)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    /** \n     * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\n     * @return winnerName_ the name of the winner\n     */\n    function winnerName() public view\n            returns (bytes32 winnerName_)\n    {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n}\n"
              }
            }
          },
          '/.workspaces/default_workspace/scripts': {
            children: {
              '/.workspaces/default_workspace/scripts/deploy_web3.js': {
                content: "// Right click on the script name and hit \"Run\" to execute\n(async () => {\n    try {\n        console.log('Running deployWithWeb3 script...')\n        \n        const contractName = 'Storage' // Change this for other contract\n        const constructorArgs = []    // Put constructor args (if any) here for your contract\n    \n        // Note that the script needs the ABI which is generated from the compilation artifact.\n        // Make sure contract is compiled and artifacts are generated\n        const artifactsPath = `browser/contracts/artifacts/${contractName}.json` // Change this for different path\n\n        const metadata = JSON.parse(await remix.call('fileManager', 'getFile', artifactsPath))\n        const accounts = await web3.eth.getAccounts()\n    \n        let contract = new web3.eth.Contract(metadata.abi)\n    \n        contract = contract.deploy({\n            data: metadata.data.bytecode.object,\n            arguments: constructorArgs\n        })\n    \n        const newContractInstance = await contract.send({\n            from: accounts[0],\n            gas: 1500000,\n            gasPrice: '30000000000'\n        })\n        console.log('Contract deployed at address: ', newContractInstance.options.address)\n    } catch (e) {\n        console.log(e.message)\n    }\n  })()"
              },
              '/.workspaces/default_workspace/scripts/deploy_ethers.js': {
                content: "// Right click on the script name and hit \"Run\" to execute\n(async () => {\n    try {\n        console.log('Running deployWithEthers script...')\n    \n        const contractName = 'Storage' // Change this for other contract\n        const constructorArgs = []    // Put constructor args (if any) here for your contract\n\n        // Note that the script needs the ABI which is generated from the compilation artifact.\n        // Make sure contract is compiled and artifacts are generated\n        const artifactsPath = `browser/contracts/artifacts/${contractName}.json` // Change this for different path\n    \n        const metadata = JSON.parse(await remix.call('fileManager', 'getFile', artifactsPath))\n        // 'web3Provider' is a remix global variable object\n        const signer = (new ethers.providers.Web3Provider(web3Provider)).getSigner()\n    \n        let factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, signer);\n    \n        let contract = await factory.deploy(...constructorArgs);\n    \n        console.log('Contract Address: ', contract.address);\n    \n        // The contract is NOT deployed yet; we must wait until it is mined\n        await contract.deployed()\n        console.log('Deployment successful.')\n    } catch (e) {\n        console.log(e.message)\n    }\n})()"
              }
            }
          },
          '/.workspaces/default_workspace/tests': {
            children: {
              '/.workspaces/default_workspace/tests/4_Ballot_test.sol': {
                content: '// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\nimport "remix_tests.sol"; // this import is automatically injected by Remix.\nimport "../contracts/3_Ballot.sol";\n\ncontract BallotTest {\n   \n    bytes32[] proposalNames;\n   \n    Ballot ballotToTest;\n    function beforeAll () public {\n        proposalNames.push(bytes32("candidate1"));\n        ballotToTest = new Ballot(proposalNames);\n    }\n    \n    function checkWinningProposal () public {\n        ballotToTest.vote(0);\n        Assert.equal(ballotToTest.winningProposal(), uint(0), "proposal at index 0 should be the winning proposal");\n        Assert.equal(ballotToTest.winnerName(), bytes32("candidate1"), "candidate1 should be the winner name");\n    }\n    \n    function checkWinninProposalWithReturnValue () public view returns (bool) {\n        return ballotToTest.winningProposal() == 0;\n    }\n}\n'
              }
            }
          }
        }
      },
      '/.workspaces/workspace_test': {
        children: {
          '/.workspaces/workspace_test/README.txt': {
            content: "REMIX EXAMPLE PROJECT\n\nRemix example project is present when Remix loads very first time or there are no files existing in the File Explorer. \nIt contains 3 directories:\n\n1. 'contracts': Holds three contracts with different complexity level, denoted with number prefix in file name.\n2. 'scripts': Holds two scripts to deploy a contract. It is explained below.\n3. 'tests': Contains one test file for 'Ballot' contract with unit tests in Solidity.\n\nSCRIPTS\n\nThe 'scripts' folder contains example async/await scripts for deploying the 'Storage' contract.\nFor the deployment of any other contract, 'contractName' and 'constructorArgs' should be updated (along with other code if required). \nScripts have full access to the web3.js and ethers.js libraries.\n\nTo run a script, right click on file name in the file explorer and click 'Run'. Remember, Solidity file must already be compiled.\n\nOutput from script will appear in remix terminal.\n"
          },
          '/.workspaces/workspace_test/contracts': {
            children: {
              '/.workspaces/workspace_test/contracts/2_Owner.sol': {
                content: "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Owner\n * @dev Set & change owner\n */\ncontract Owner {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier isOwner() {\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use 'require' to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"
              },
              '/.workspaces/workspace_test/contracts/3_Ballot.sol': {
                content: "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/** \n * @title Ballot\n * @dev Implements voting process along with vote delegation\n */\ncontract Ballot {\n   \n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        address delegate; // person delegated to\n        uint vote;   // index of the voted proposal\n    }\n\n    struct Proposal {\n        // If you can limit the length to a certain number of bytes, \n        // always use one of bytes1 to bytes32 because they are much cheaper\n        bytes32 name;   // short name (up to 32 bytes)\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    mapping(address => Voter) public voters;\n\n    Proposal[] public proposals;\n\n    /** \n     * @dev Create a new ballot to choose one of 'proposalNames'.\n     * @param proposalNames names of proposals\n     */\n    constructor(bytes32[] memory proposalNames) {\n        chairperson = msg.sender;\n        voters[chairperson].weight = 1;\n\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // 'Proposal({...})' creates a temporary\n            // Proposal object and 'proposals.push(...)'\n            // appends it to the end of 'proposals'.\n            proposals.push(Proposal({\n                name: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n    \n    /** \n     * @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\n     * @param voter address of voter\n     */\n    function giveRightToVote(address voter) public {\n        require(\n            msg.sender == chairperson,\n            \"Only chairperson can give right to vote.\"\n        );\n        require(\n            !voters[voter].voted,\n            \"The voter already voted.\"\n        );\n        require(voters[voter].weight == 0);\n        voters[voter].weight = 1;\n    }\n\n    /**\n     * @dev Delegate your vote to the voter 'to'.\n     * @param to address to which vote is delegated\n     */\n    function delegate(address to) public {\n        Voter storage sender = voters[msg.sender];\n        require(!sender.voted, \"You already voted.\");\n        require(to != msg.sender, \"Self-delegation is disallowed.\");\n\n        while (voters[to].delegate != address(0)) {\n            to = voters[to].delegate;\n\n            // We found a loop in the delegation, not allowed.\n            require(to != msg.sender, \"Found loop in delegation.\");\n        }\n        sender.voted = true;\n        sender.delegate = to;\n        Voter storage delegate_ = voters[to];\n        if (delegate_.voted) {\n            // If the delegate already voted,\n            // directly add to the number of votes\n            proposals[delegate_.vote].voteCount += sender.weight;\n        } else {\n            // If the delegate did not vote yet,\n            // add to her weight.\n            delegate_.weight += sender.weight;\n        }\n    }\n\n    /**\n     * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\n     * @param proposal index of proposal in the proposals array\n     */\n    function vote(uint proposal) public {\n        Voter storage sender = voters[msg.sender];\n        require(sender.weight != 0, \"Has no right to vote\");\n        require(!sender.voted, \"Already voted.\");\n        sender.voted = true;\n        sender.vote = proposal;\n\n        // If 'proposal' is out of the range of the array,\n        // this will throw automatically and revert all\n        // changes.\n        proposals[proposal].voteCount += sender.weight;\n    }\n\n    /** \n     * @dev Computes the winning proposal taking all previous votes into account.\n     * @return winningProposal_ index of winning proposal in the proposals array\n     */\n    function winningProposal() public view\n            returns (uint winningProposal_)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    /** \n     * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\n     * @return winnerName_ the name of the winner\n     */\n    function winnerName() public view\n            returns (bytes32 winnerName_)\n    {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n}\n"
              },
              '/.workspaces/workspace_test/contracts/1_Storage.sol': {
                content: "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Storage test\n * @dev Store & retrieve value in a variable\n */\ncontract Storage {\n\n    uint256 number;\n\n    /**\n     * @dev Store value in variable\n     * @param num value to store\n     */\n    function store(uint256 num) public {\n        number = num;\n    }\n\n    /**\n     * @dev Return value \n     * @return value of 'number'\n     */\n    function retrieve() public view returns (uint256){\n        return number;\n    }\n}"
              },
              '/.workspaces/workspace_test/contracts/artifacts': {
                children: {
                  '/.workspaces/workspace_test/contracts/artifacts/Storage_metadata.json': {
                    content: "{\n\t\"compiler\": {\n\t\t\"version\": \"0.8.7+commit.e28d00a7\"\n\t},\n\t\"language\": \"Solidity\",\n\t\"output\": {\n\t\t\"abi\": [\n\t\t\t{\n\t\t\t\t\"inputs\": [],\n\t\t\t\t\"name\": \"retrieve\",\n\t\t\t\t\"outputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"stateMutability\": \"view\",\n\t\t\t\t\"type\": \"function\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"inputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"num\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"name\": \"store\",\n\t\t\t\t\"outputs\": [],\n\t\t\t\t\"stateMutability\": \"nonpayable\",\n\t\t\t\t\"type\": \"function\"\n\t\t\t}\n\t\t],\n\t\t\"devdoc\": {\n\t\t\t\"details\": \"Store & retrieve value in a variable\",\n\t\t\t\"kind\": \"dev\",\n\t\t\t\"methods\": {\n\t\t\t\t\"retrieve()\": {\n\t\t\t\t\t\"details\": \"Return value \",\n\t\t\t\t\t\"returns\": {\n\t\t\t\t\t\t\"_0\": \"value of 'number'\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"store(uint256)\": {\n\t\t\t\t\t\"details\": \"Store value in variable\",\n\t\t\t\t\t\"params\": {\n\t\t\t\t\t\t\"num\": \"value to store\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"title\": \"Storage test\",\n\t\t\t\"version\": 1\n\t\t},\n\t\t\"userdoc\": {\n\t\t\t\"kind\": \"user\",\n\t\t\t\"methods\": {},\n\t\t\t\"version\": 1\n\t\t}\n\t},\n\t\"settings\": {\n\t\t\"compilationTarget\": {\n\t\t\t\"contracts/1_Storage.sol\": \"Storage\"\n\t\t},\n\t\t\"evmVersion\": \"london\",\n\t\t\"libraries\": {},\n\t\t\"metadata\": {\n\t\t\t\"bytecodeHash\": \"ipfs\"\n\t\t},\n\t\t\"optimizer\": {\n\t\t\t\"enabled\": false,\n\t\t\t\"runs\": 200\n\t\t},\n\t\t\"remappings\": []\n\t},\n\t\"sources\": {\n\t\t\"contracts/1_Storage.sol\": {\n\t\t\t\"keccak256\": \"0x5fdcb186c282da9dbe0202f57dc7ecc82c500bd26497d730ccd061f63287b37f\",\n\t\t\t\"license\": \"GPL-3.0\",\n\t\t\t\"urls\": [\n\t\t\t\t\"bzz-raw://c5cb9b474b9dd1095b316711f7e00359f202b1d0924b5e887bcc29bd05e15639\",\n\t\t\t\t\"dweb:/ipfs/QmQ3YpdnV5hWGX6BLW96mx2pyx7LBmZbcPZG2KV2YzPKA7\"\n\t\t\t]\n\t\t}\n\t},\n\t\"version\": 1\n}"
                  },
                  '/.workspaces/workspace_test/contracts/artifacts/Storage.json': {
                    content: '{\n\t"deploy": {\n\t\t"VM:-": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t},\n\t\t"main:1": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t},\n\t\t"ropsten:3": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t},\n\t\t"rinkeby:4": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t},\n\t\t"kovan:42": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t},\n\t\t"görli:5": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t},\n\t\t"Custom": {\n\t\t\t"linkReferences": {},\n\t\t\t"autoDeployLib": true\n\t\t}\n\t},\n\t"data": {\n\t\t"bytecode": {\n\t\t\t"functionDebugData": {},\n\t\t\t"generatedSources": [],\n\t\t\t"linkReferences": {},\n\t\t\t"object": "608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e565b005b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea2646970667358221220af2d19f6aaebe734d3fabd5338d3c939d9b2c324853046cb51810adbbf14cfac64736f6c63430008070033",\n\t\t\t"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x150 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2E64CEC1 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x6057361D EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x9D JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x97 DUP2 PUSH2 0x103 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3 JUMPI PUSH2 0xB2 PUSH2 0xFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC1 DUP5 DUP3 DUP6 ADD PUSH2 0x88 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD3 DUP2 PUSH2 0xF4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10C DUP2 PUSH2 0xF4 JUMP JUMPDEST DUP2 EQ PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2D NOT 0xF6 0xAA 0xEB 0xE7 CALLVALUE 0xD3 STATICCALL 0xBD MSTORE8 CODESIZE 0xD3 0xC9 CODECOPY 0xD9 0xB2 0xC3 0x24 DUP6 ADDRESS CHAINID 0xCB MLOAD DUP2 EXP 0xDB 0xBF EQ 0xCF 0xAC PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",\n\t\t\t"sourceMap": "146:356:0:-:0;;;;;;;;;;;;;;;;;;;"\n\t\t},\n\t\t"deployedBytecode": {\n\t\t\t"functionDebugData": {\n\t\t\t\t"@retrieve_24": {\n\t\t\t\t\t"entryPoint": 117,\n\t\t\t\t\t"id": 24,\n\t\t\t\t\t"parameterSlots": 0,\n\t\t\t\t\t"returnSlots": 1\n\t\t\t\t},\n\t\t\t\t"@store_15": {\n\t\t\t\t\t"entryPoint": 126,\n\t\t\t\t\t"id": 15,\n\t\t\t\t\t"parameterSlots": 1,\n\t\t\t\t\t"returnSlots": 0\n\t\t\t\t},\n\t\t\t\t"abi_decode_t_uint256": {\n\t\t\t\t\t"entryPoint": 136,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 2,\n\t\t\t\t\t"returnSlots": 1\n\t\t\t\t},\n\t\t\t\t"abi_decode_tuple_t_uint256": {\n\t\t\t\t\t"entryPoint": 157,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 2,\n\t\t\t\t\t"returnSlots": 1\n\t\t\t\t},\n\t\t\t\t"abi_encode_t_uint256_to_t_uint256_fromStack": {\n\t\t\t\t\t"entryPoint": 202,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 2,\n\t\t\t\t\t"returnSlots": 0\n\t\t\t\t},\n\t\t\t\t"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {\n\t\t\t\t\t"entryPoint": 217,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 2,\n\t\t\t\t\t"returnSlots": 1\n\t\t\t\t},\n\t\t\t\t"allocate_unbounded": {\n\t\t\t\t\t"entryPoint": null,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 0,\n\t\t\t\t\t"returnSlots": 1\n\t\t\t\t},\n\t\t\t\t"cleanup_t_uint256": {\n\t\t\t\t\t"entryPoint": 244,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 1,\n\t\t\t\t\t"returnSlots": 1\n\t\t\t\t},\n\t\t\t\t"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {\n\t\t\t\t\t"entryPoint": null,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 0,\n\t\t\t\t\t"returnSlots": 0\n\t\t\t\t},\n\t\t\t\t"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {\n\t\t\t\t\t"entryPoint": 254,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 0,\n\t\t\t\t\t"returnSlots": 0\n\t\t\t\t},\n\t\t\t\t"validator_revert_t_uint256": {\n\t\t\t\t\t"entryPoint": 259,\n\t\t\t\t\t"id": null,\n\t\t\t\t\t"parameterSlots": 1,\n\t\t\t\t\t"returnSlots": 0\n\t\t\t\t}\n\t\t\t},\n\t\t\t"generatedSources": [\n\t\t\t\t{\n\t\t\t\t\t"ast": {\n\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t"src": "0:1374:1",\n\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "59:87:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulAssignment",\n\t\t\t\t\t\t\t\t\t\t\t"src": "69:29:1",\n\t\t\t\t\t\t\t\t\t\t\t"value": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "offset",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "91:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "calldataload",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "78:12:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "78:20:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"variableNames": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "69:5:1"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "134:5:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "validator_revert_t_uint256",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "107:26:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "107:33:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t"src": "107:33:1"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "abi_decode_t_uint256",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"parameters": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "offset",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "37:6:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "end",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "45:3:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"returnVariables": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "53:5:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "7:139:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "218:263:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "264:83:1",\n\t\t\t\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "266:77:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "266:79:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "266:79:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"condition": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "dataEnd",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "239:7:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "headStart",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "248:9:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "sub",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "235:3:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "235:23:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "260:2:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "32"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "slt",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "231:3:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "231:32:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIf",\n\t\t\t\t\t\t\t\t\t\t\t"src": "228:119:1"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t\t\t"src": "357:117:1",\n\t\t\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulVariableDeclaration",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "372:15:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"value": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "386:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t"variables": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "offset",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "376:6:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulAssignment",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "401:63:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"value": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "headStart",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "436:9:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "offset",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "447:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "add",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "432:3:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "432:22:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "dataEnd",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "456:7:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "abi_decode_t_uint256",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "411:20:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "411:53:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t"variableNames": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value0",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "401:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "abi_decode_tuple_t_uint256",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"parameters": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "headStart",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "188:9:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "dataEnd",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "199:7:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"returnVariables": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "value0",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "211:6:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "152:329:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "552:53:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "pos",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "569:3:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "592:5:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "cleanup_t_uint256",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "574:17:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "574:24:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "mstore",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "562:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "562:37:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t"src": "562:37:1"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "abi_encode_t_uint256_to_t_uint256_fromStack",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"parameters": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "540:5:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "pos",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "547:3:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "487:118:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "709:124:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulAssignment",\n\t\t\t\t\t\t\t\t\t\t\t"src": "719:26:1",\n\t\t\t\t\t\t\t\t\t\t\t"value": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "headStart",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "731:9:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "742:2:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "32"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "add",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "727:3:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "727:18:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"variableNames": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "tail",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "719:4:1"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value0",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "799:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "headStart",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "812:9:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "823:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "add",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "808:3:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "808:17:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "abi_encode_t_uint256_to_t_uint256_fromStack",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "755:43:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "755:71:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t"src": "755:71:1"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"parameters": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "headStart",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "681:9:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "value0",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "693:6:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"returnVariables": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "tail",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "704:4:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "611:222:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "879:35:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulAssignment",\n\t\t\t\t\t\t\t\t\t\t\t"src": "889:19:1",\n\t\t\t\t\t\t\t\t\t\t\t"value": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "905:2:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "64"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "mload",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "899:5:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "899:9:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"variableNames": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "memPtr",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "889:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "allocate_unbounded",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"returnVariables": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "memPtr",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "872:6:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "839:75:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "965:32:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulAssignment",\n\t\t\t\t\t\t\t\t\t\t\t"src": "975:16:1",\n\t\t\t\t\t\t\t\t\t\t\t"value": {\n\t\t\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "986:5:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"variableNames": [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "cleaned",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "975:7:1"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "cleanup_t_uint256",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"parameters": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "947:5:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"returnVariables": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "cleaned",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "957:7:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "920:77:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "1092:28:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1109:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1112:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "revert",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1102:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "1102:12:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t"src": "1102:12:1"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"src": "1003:117:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "1215:28:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1232:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1235:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "revert",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1225:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "1225:12:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t"src": "1225:12:1"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"src": "1126:117:1"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t"src": "1292:79:1",\n\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t"body": {\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulBlock",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "1349:16:1",\n\t\t\t\t\t\t\t\t\t\t\t\t"statements": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"expression": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1358:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"kind": "number",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulLiteral",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1361:1:1",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"type": "",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"value": "0"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "revert",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1351:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1351:12:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulExpressionStatement",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1351:12:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"condition": {\n\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1315:5:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"arguments": [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1340:5:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "cleanup_t_uint256",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1322:17:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1322:24:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "eq",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1312:2:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1312:35:1"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t"functionName": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t"name": "iszero",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIdentifier",\n\t\t\t\t\t\t\t\t\t\t\t\t\t"src": "1305:6:1"\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulFunctionCall",\n\t\t\t\t\t\t\t\t\t\t\t\t"src": "1305:43:1"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t"nodeType": "YulIf",\n\t\t\t\t\t\t\t\t\t\t\t"src": "1302:63:1"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t"name": "validator_revert_t_uint256",\n\t\t\t\t\t\t\t\t"nodeType": "YulFunctionDefinition",\n\t\t\t\t\t\t\t\t"parameters": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"name": "value",\n\t\t\t\t\t\t\t\t\t\t"nodeType": "YulTypedName",\n\t\t\t\t\t\t\t\t\t\t"src": "1285:5:1",\n\t\t\t\t\t\t\t\t\t\t"type": ""\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t"src": "1249:122:1"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t"contents": "{\\n\\n    function abi_decode_t_uint256(offset, end) -> value {\\n        value := calldataload(offset)\\n        validator_revert_t_uint256(value)\\n    }\\n\\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\\n\\n        {\\n\\n            let offset := 0\\n\\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\\n        }\\n\\n    }\\n\\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\\n        mstore(pos, cleanup_t_uint256(value))\\n    }\\n\\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\\n        tail := add(headStart, 32)\\n\\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\\n\\n    }\\n\\n    function allocate_unbounded() -> memPtr {\\n        memPtr := mload(64)\\n    }\\n\\n    function cleanup_t_uint256(value) -> cleaned {\\n        cleaned := value\\n    }\\n\\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\\n        revert(0, 0)\\n    }\\n\\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\\n        revert(0, 0)\\n    }\\n\\n    function validator_revert_t_uint256(value) {\\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\\n    }\\n\\n}\\n",\n\t\t\t\t\t"id": 1,\n\t\t\t\t\t"language": "Yul",\n\t\t\t\t\t"name": "#utility.yul"\n\t\t\t\t}\n\t\t\t],\n\t\t\t"immutableReferences": {},\n\t\t\t"linkReferences": {},\n\t\t\t"object": "608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e565b005b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea2646970667358221220af2d19f6aaebe734d3fabd5338d3c939d9b2c324853046cb51810adbbf14cfac64736f6c63430008070033",\n\t\t\t"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2E64CEC1 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x6057361D EQ PUSH2 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x50 SWAP2 SWAP1 PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x9D JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x97 DUP2 PUSH2 0x103 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3 JUMPI PUSH2 0xB2 PUSH2 0xFE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC1 DUP5 DUP3 DUP6 ADD PUSH2 0x88 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD3 DUP2 PUSH2 0xF4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10C DUP2 PUSH2 0xF4 JUMP JUMPDEST DUP2 EQ PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2D NOT 0xF6 0xAA 0xEB 0xE7 CALLVALUE 0xD3 STATICCALL 0xBD MSTORE8 CODESIZE 0xD3 0xC9 CODECOPY 0xD9 0xB2 0xC3 0x24 DUP6 ADDRESS CHAINID 0xCB MLOAD DUP2 EXP 0xDB 0xBF EQ 0xCF 0xAC PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",\n\t\t\t"sourceMap": "146:356:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;421:79;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;276:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;421:79;462:7;487:6;;480:13;;421:79;:::o;276:64::-;330:3;321:6;:12;;;;276:64;:::o;7:139:1:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:329::-;211:6;260:2;248:9;239:7;235:23;231:32;228:119;;;266:79;;:::i;:::-;228:119;386:1;411:53;456:7;447:6;436:9;432:22;411:53;:::i;:::-;401:63;;357:117;152:329;;;;:::o;487:118::-;574:24;592:5;574:24;:::i;:::-;569:3;562:37;487:118;;:::o;611:222::-;704:4;742:2;731:9;727:18;719:26;;755:71;823:1;812:9;808:17;799:6;755:71;:::i;:::-;611:222;;;;:::o;920:77::-;957:7;986:5;975:16;;920:77;;;:::o;1126:117::-;1235:1;1232;1225:12;1249:122;1322:24;1340:5;1322:24;:::i;:::-;1315:5;1312:35;1302:63;;1361:1;1358;1351:12;1302:63;1249:122;:::o"\n\t\t},\n\t\t"gasEstimates": {\n\t\t\t"creation": {\n\t\t\t\t"codeDepositCost": "67200",\n\t\t\t\t"executionCost": "117",\n\t\t\t\t"totalCost": "67317"\n\t\t\t},\n\t\t\t"external": {\n\t\t\t\t"retrieve()": "2415",\n\t\t\t\t"store(uint256)": "22520"\n\t\t\t}\n\t\t},\n\t\t"methodIdentifiers": {\n\t\t\t"retrieve()": "2e64cec1",\n\t\t\t"store(uint256)": "6057361d"\n\t\t}\n\t},\n\t"abi": [\n\t\t{\n\t\t\t"inputs": [],\n\t\t\t"name": "retrieve",\n\t\t\t"outputs": [\n\t\t\t\t{\n\t\t\t\t\t"internalType": "uint256",\n\t\t\t\t\t"name": "",\n\t\t\t\t\t"type": "uint256"\n\t\t\t\t}\n\t\t\t],\n\t\t\t"stateMutability": "view",\n\t\t\t"type": "function"\n\t\t},\n\t\t{\n\t\t\t"inputs": [\n\t\t\t\t{\n\t\t\t\t\t"internalType": "uint256",\n\t\t\t\t\t"name": "num",\n\t\t\t\t\t"type": "uint256"\n\t\t\t\t}\n\t\t\t],\n\t\t\t"name": "store",\n\t\t\t"outputs": [],\n\t\t\t"stateMutability": "nonpayable",\n\t\t\t"type": "function"\n\t\t}\n\t]\n}'
                  }
                }
              }
            }
          },
          '/.workspaces/workspace_test/scripts': {
            children: {
              '/.workspaces/workspace_test/scripts/deploy_web3.js': {
                content: "// Right click on the script name and hit \"Run\" to execute\n(async () => {\n    try {\n        console.log('Running deployWithWeb3 script...')\n        \n        const contractName = 'Storage' // Change this for other contract\n        const constructorArgs = []    // Put constructor args (if any) here for your contract\n    \n        // Note that the script needs the ABI which is generated from the compilation artifact.\n        // Make sure contract is compiled and artifacts are generated\n        const artifactsPath = `browser/contracts/artifacts/${contractName}.json` // Change this for different path\n\n        const metadata = JSON.parse(await remix.call('fileManager', 'getFile', artifactsPath))\n        const accounts = await web3.eth.getAccounts()\n    \n        let contract = new web3.eth.Contract(metadata.abi)\n    \n        contract = contract.deploy({\n            data: metadata.data.bytecode.object,\n            arguments: constructorArgs\n        })\n    \n        const newContractInstance = await contract.send({\n            from: accounts[0],\n            gas: 1500000,\n            gasPrice: '30000000000'\n        })\n        console.log('Contract deployed at address: ', newContractInstance.options.address)\n    } catch (e) {\n        console.log(e.message)\n    }\n  })()"
              },
              '/.workspaces/workspace_test/scripts/deploy_ethers.js': {
                content: "// Right click on the script name and hit \"Run\" to execute\n(async () => {\n    try {\n        console.log('Running deployWithEthers script...')\n    \n        const contractName = 'Storage' // Change this for other contract\n        const constructorArgs = []    // Put constructor args (if any) here for your contract\n\n        // Note that the script needs the ABI which is generated from the compilation artifact.\n        // Make sure contract is compiled and artifacts are generated\n        const artifactsPath = `browser/contracts/artifacts/${contractName}.json` // Change this for different path\n    \n        const metadata = JSON.parse(await remix.call('fileManager', 'getFile', artifactsPath))\n        // 'web3Provider' is a remix global variable object\n        const signer = (new ethers.providers.Web3Provider(web3Provider)).getSigner()\n    \n        let factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, signer);\n    \n        let contract = await factory.deploy(...constructorArgs);\n    \n        console.log('Contract Address: ', contract.address);\n    \n        // The contract is NOT deployed yet; we must wait until it is mined\n        await contract.deployed()\n        console.log('Deployment successful.')\n    } catch (e) {\n        console.log(e.message)\n    }\n})()"
              }
            }
          },
          '/.workspaces/workspace_test/tests': {
            children: {
              '/.workspaces/workspace_test/tests/4_Ballot_test.sol': {
                content: '// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\nimport "remix_tests.sol"; // this import is automatically injected by Remix.\nimport "../contracts/3_Ballot.sol";\n\ncontract BallotTest {\n   \n    bytes32[] proposalNames;\n   \n    Ballot ballotToTest;\n    function beforeAll () public {\n        proposalNames.push(bytes32("candidate1"));\n        ballotToTest = new Ballot(proposalNames);\n    }\n    \n    function checkWinningProposal () public {\n        ballotToTest.vote(0);\n        Assert.equal(ballotToTest.winningProposal(), uint(0), "proposal at index 0 should be the winning proposal");\n        Assert.equal(ballotToTest.winnerName(), bytes32("candidate1"), "candidate1 should be the winner name");\n    }\n    \n    function checkWinninProposalWithReturnValue () public view returns (bool) {\n        return ballotToTest.winningProposal() == 0;\n    }\n}\n'
              }
            }
          }
        }
      }
    }
  }
}
